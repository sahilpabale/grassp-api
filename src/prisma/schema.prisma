// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model Users {
  id              String               @id @default(uuid())
  email           String               @unique @db.VarChar(255)
  password        String
  fullName        String               @db.VarChar(255)
  isVerified      Boolean              @default(false)
  interests       Interests[]          @relation("UsersInterests")
  modulesProgress UserModuleProgress[]
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
}

model Interests {
  id        String    @id @default(uuid())
  name      String    @unique
  title     String
  users     Users[]   @relation("UsersInterests")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  modules   Modules[]
}

model Modules {
  id            String               @id @default(uuid())
  title         String               @db.VarChar(255)
  difficulty    Difficulty
  cards         Cards[]
  usersProgress UserModuleProgress[]
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  interest      Interests            @relation(fields: [interestId], references: [name])
  interestId    String
}

model Cards {
  id        String   @id @default(uuid())
  moduleId  String
  module    Modules  @relation(fields: [moduleId], references: [id])
  title     String   @db.VarChar(255)
  content   String   @db.Text
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserModuleProgress {
  user       Users    @relation(fields: [userId], references: [id])
  userId     String
  module     Modules  @relation(fields: [moduleId], references: [id])
  moduleId   String
  isFinished Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([userId, moduleId])
}

enum Difficulty {
  Beginner
  Intermediate
  Advanced
}
